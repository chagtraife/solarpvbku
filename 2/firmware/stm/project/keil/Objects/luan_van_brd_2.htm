<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\luan_van_brd_2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\luan_van_brd_2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Dec 09 23:03:38 2018
<BR><P>
<H3>Maximum Stack Usage =        252 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
u8g_com_hw_i2c_fn &rArr; I2C_LowLevel_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[12]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[3f]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[3e]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[3b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[40]">u8g_com_hw_i2c_fn</a> from u8g_arm.o(i.u8g_com_hw_i2c_fn) referenced from display.o(i.display_init)
 <LI><a href="#[1]">u8g_com_null_fn</a> from u8g_com_null.o(i.u8g_com_null_fn) referenced 30 times from u8g_dev_ssd1306_128x64.o(.data)
 <LI><a href="#[5]">u8g_dev_sh1106_128x64_2x_fn</a> from u8g_dev_ssd1306_128x64.o(i.u8g_dev_sh1106_128x64_2x_fn) referenced 6 times from u8g_dev_ssd1306_128x64.o(.data)
 <LI><a href="#[4]">u8g_dev_sh1106_128x64_fn</a> from u8g_dev_ssd1306_128x64.o(i.u8g_dev_sh1106_128x64_fn) referenced 6 times from u8g_dev_ssd1306_128x64.o(.data)
 <LI><a href="#[3]">u8g_dev_ssd1306_128x64_2x_fn</a> from u8g_dev_ssd1306_128x64.o(i.u8g_dev_ssd1306_128x64_2x_fn) referenced 6 times from u8g_dev_ssd1306_128x64.o(.data)
 <LI><a href="#[0]">u8g_dev_ssd1306_128x64_fn</a> from u8g_dev_ssd1306_128x64.o(i.u8g_dev_ssd1306_128x64_fn) referenced 6 times from u8g_dev_ssd1306_128x64.o(.data)
 <LI><a href="#[2]">u8g_dev_ssd1306_adafruit_128x64_fn</a> from u8g_dev_ssd1306_128x64.o(i.u8g_dev_ssd1306_adafruit_128x64_fn) referenced 6 times from u8g_dev_ssd1306_128x64.o(.data)
 <LI><a href="#[41]">u8g_font_calc_vref_font</a> from u8g_font.o(i.u8g_font_calc_vref_font) referenced from u8g_font.o(i.u8g_SetFontPosBaseline)
 <LI><a href="#[42]">u8g_state_dummy_cb</a> from u8g_state.o(i.u8g_state_dummy_cb) referenced from u8g_ll_api.o(i.u8g_init_data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[43]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_cal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CAL
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avr_data
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_cal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CAL
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PF_cal
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avr_data
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_cal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CAL
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PF_cal
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_data_AC
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avr_data
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_adc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_cal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CAL
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avr_data
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_data_AC
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_cal
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_cal
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_data_AC
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_data_AC
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fb]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[46]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[59]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[44]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[fd]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[fe]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ff]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[53]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[100]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[5c]"></a>ADC_Configuration</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, measure.o(i.ADC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_init
</UL>

<P><STRONG><a name="[66]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[63]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[6b]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[69]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[64]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[65]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[68]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[6c]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[6a]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[5f]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[60]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIO_Configuration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LowLevel_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[72]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LowLevel_Init
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[76]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LowLevel_Init
</UL>

<P><STRONG><a name="[79]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[7d]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[78]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[6f]"></a>I2C_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32f10x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LowLevel_Init
</UL>

<P><STRONG><a name="[71]"></a>I2C_LowLevel_Init</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, i2c.o(i.I2C_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = I2C_LowLevel_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StructInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_com_hw_i2c_fn
</UL>

<P><STRONG><a name="[7b]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[7c]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[75]"></a>I2C_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LowLevel_Init
</UL>

<P><STRONG><a name="[77]"></a>I2C_Write</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, i2c.o(i.I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Write &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_com_hw_i2c_fn
</UL>

<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[8c]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[7e]"></a>PF_cal</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, measure.o(i.PF_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PF_cal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_data_AC
</UL>

<P><STRONG><a name="[80]"></a>P_CAL</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, measure.o(i.P_CAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = P_CAL &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_data_AC
</UL>

<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[73]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LowLevel_Init
</UL>

<P><STRONG><a name="[74]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LowLevel_Init
</UL>

<P><STRONG><a name="[5e]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LowLevel_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[6d]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[70]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[81]"></a>RMS_cal</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, measure.o(i.RMS_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RMS_cal &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_data_AC
</UL>

<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>TIM4_Configuration</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, measure.o(i.TIM4_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM4_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_init
</UL>

<P><STRONG><a name="[8a]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[89]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_PrescalerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[a0]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micro_seconds
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_data_AC
</UL>

<P><STRONG><a name="[88]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[87]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[8b]"></a>UART_Configuration</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, main.o(i.UART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[aa]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[91]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[8e]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[92]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[102]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b2]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[103]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[104]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[96]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[105]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a4]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[106]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[107]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[108]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[109]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b3]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[9c]"></a>avr_data</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, measure.o(i.avr_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = avr_data &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>convert_adc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, measure.o(i.convert_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = convert_adc &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_data_AC
</UL>

<P><STRONG><a name="[9e]"></a>delay_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, u8g_arm.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_com_hw_i2c_fn
</UL>

<P><STRONG><a name="[9f]"></a>delay_micro_seconds</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, u8g_arm.o(i.delay_micro_seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_micro_seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_MicroDelay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_10MicroDelay
</UL>

<P><STRONG><a name="[a1]"></a>display</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, display.o(i.display))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = display &rArr; u8g_DrawStr180 &rArr; u8g_draw_glyph180 &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPage
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPage
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr180
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>display_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, display.o(i.display_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = display_init &rArr; u8g_InitComFn &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitComFn
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[ab]"></a>getdata_time</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, measure.o(i.getdata_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getdata_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_data_AC
</UL>

<P><STRONG><a name="[3b]"></a>main</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = main &rArr; display &rArr; u8g_DrawStr180 &rArr; u8g_draw_glyph180 &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_data_AC
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avr_data
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[af]"></a>measure_data_AC</STRONG> (Thumb, 824 bytes, Stack size 32 bytes, measure.o(i.measure_data_AC))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = measure_data_AC &rArr; RMS_cal &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdata_time
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_adc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_cal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CAL
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PF_cal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>measure_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, measure.o(i.measure_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = measure_init &rArr; ADC_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>read_adc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, measure.o(i.read_adc))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdata_time
</UL>

<P><STRONG><a name="[ae]"></a>send_data</STRONG> (Thumb, 204 bytes, Stack size 128 bytes, measure.o(i.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = send_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMS_cal
</UL>

<P><STRONG><a name="[b4]"></a>u8g_10MicroDelay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, u8g_arm.o(i.u8g_10MicroDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_10MicroDelay &rArr; delay_micro_seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micro_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_com_hw_i2c_fn
</UL>

<P><STRONG><a name="[b5]"></a>u8g_Begin</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitLL
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitComFn
</UL>

<P><STRONG><a name="[ba]"></a>u8g_Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, u8g_arm.o(i.u8g_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_Delay &rArr; delay_micro_seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micro_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[bb]"></a>u8g_Draw8Pixel</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, u8g_ll_api.o(i.u8g_Draw8Pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8PixelLL
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph180
</UL>

<P><STRONG><a name="[bc]"></a>u8g_Draw8PixelLL</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, u8g_ll_api.o(i.u8g_Draw8PixelLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
</UL>

<P><STRONG><a name="[a5]"></a>u8g_DrawStr180</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, u8g_font.o(i.u8g_DrawStr180))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = u8g_DrawStr180 &rArr; u8g_draw_glyph180 &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph180
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[a2]"></a>u8g_FirstPage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_FirstPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_FirstPage &rArr; u8g_FirstPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPageLL
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[bf]"></a>u8g_FirstPageLL</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_FirstPageLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_FirstPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPage
</UL>

<P><STRONG><a name="[c0]"></a>u8g_GetGlyph</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, u8g_font.o(i.u8g_GetGlyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = u8g_GetGlyph &rArr; u8g_CopyGlyphDataToCache &rArr; u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontStartEncoding
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontEndEncoding
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding97Pos
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding65Pos
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontGlyphStructureSize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FillEmptyGlyphCache
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_CopyGlyphDataToCache
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph180
</UL>

<P><STRONG><a name="[c7]"></a>u8g_GetHeightLL</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_GetHeightLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_GetHeightLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
</UL>

<P><STRONG><a name="[c8]"></a>u8g_GetModeLL</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_GetModeLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_GetModeLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
</UL>

<P><STRONG><a name="[c9]"></a>u8g_GetWidthLL</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_GetWidthLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
</UL>

<P><STRONG><a name="[e9]"></a>u8g_InitCom</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, u8g_com_api.o(i.u8g_InitCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_InitCom
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_adafruit_128x64_fn
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_fn
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_2x_fn
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_fn
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_2x_fn
</UL>

<P><STRONG><a name="[a8]"></a>u8g_InitComFn</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_InitComFn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = u8g_InitComFn &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init
</UL>

<P><STRONG><a name="[b6]"></a>u8g_InitLL</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_InitLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_InitLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
</UL>

<P><STRONG><a name="[cb]"></a>u8g_IsBBXIntersection</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, u8g_clip.o(i.u8g_IsBBXIntersection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_IsBBXIntersection &rArr; u8g_is_intersection_decision_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_is_intersection_decision_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph180
</UL>

<P><STRONG><a name="[cd]"></a>u8g_MicroDelay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, u8g_arm.o(i.u8g_MicroDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_MicroDelay &rArr; delay_micro_seconds
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_micro_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_com_hw_i2c_fn
</UL>

<P><STRONG><a name="[a6]"></a>u8g_NextPage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_NextPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_NextPage &rArr; u8g_NextPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPageLL
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[ce]"></a>u8g_NextPageLL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_NextPageLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_NextPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPage
</UL>

<P><STRONG><a name="[d9]"></a>u8g_SetAddress</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, u8g_com_api.o(i.u8g_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_adafruit_128x64_fn
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_fn
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_2x_fn
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_fn
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_2x_fn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[da]"></a>u8g_SetChipSelect</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, u8g_com_api.o(i.u8g_SetChipSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_SetChipSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_adafruit_128x64_fn
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_fn
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_2x_fn
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_fn
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_2x_fn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[ef]"></a>u8g_SetColorIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_ll_api.o(i.u8g_SetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>

<P><STRONG><a name="[a3]"></a>u8g_SetFont</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, u8g_font.o(i.u8g_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetLowerGDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontPosBaseline
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[d0]"></a>u8g_SetFontPosBaseline</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_SetFontPosBaseline))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>

<P><STRONG><a name="[dc]"></a>u8g_SetResetHigh</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_com_api.o(i.u8g_SetResetHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_SetResetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[db]"></a>u8g_SetResetLow</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_com_api.o(i.u8g_SetResetLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_SetResetLow
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[b7]"></a>u8g_UpdateDimension</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_UpdateDimension))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetWidthLL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetModeLL
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetHeightLL
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
</UL>

<P><STRONG><a name="[cf]"></a>u8g_UpdateRefHeight</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, u8g_font.o(i.u8g_UpdateRefHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_UpdateRefHeight &rArr; u8g_font_GetLowerGDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetLowerGDescent
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXDescent
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXAscent
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontDescent
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontAscent
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetCapitalAHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
</UL>

<P><STRONG><a name="[d8]"></a>u8g_WriteByte</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, u8g_com_api.o(i.u8g_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_adafruit_128x64_fn
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_fn
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_2x_fn
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_fn
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_2x_fn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[d7]"></a>u8g_WriteEscSeqP</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, u8g_com_api.o(i.u8g_WriteEscSeqP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_WriteEscSeqP &rArr; u8g_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteByte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetResetLow
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetResetHigh
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetChipSelect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_adafruit_128x64_fn
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_fn
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_2x_fn
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_fn
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_2x_fn
</UL>

<P><STRONG><a name="[ea]"></a>u8g_WriteSequence</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, u8g_com_api.o(i.u8g_WriteSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_WriteSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_2x_fn
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_2x_fn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_WriteBuffer
</UL>

<P><STRONG><a name="[bd]"></a>u8g_call_dev_fn</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, u8g_ll_api.o(i.u8g_call_dev_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPageLL
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitLL
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetWidthLL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetModeLL
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetHeightLL
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPageLL
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8PixelLL
</UL>

<P><STRONG><a name="[40]"></a>u8g_com_hw_i2c_fn</STRONG> (Thumb, 160 bytes, Stack size 152 bytes, u8g_arm.o(i.u8g_com_hw_i2c_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = u8g_com_hw_i2c_fn &rArr; I2C_LowLevel_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_MicroDelay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_10MicroDelay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LowLevel_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(i.display_init)
</UL>
<P><STRONG><a name="[1]"></a>u8g_com_null_fn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, u8g_com_null.o(i.u8g_com_null_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_com_null_fn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g_dev_ssd1306_128x64.o(.data)
</UL>
<P><STRONG><a name="[dd]"></a>u8g_dev_pb16v1_base_fn</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, u8g_pb16v1.o(i.u8g_dev_pb16v1_base_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = u8g_dev_pb16v1_base_fn &rArr; u8g_pb16v1_Set8PixelOpt2 &rArr; u8g_pb16v1_SetPixel &rArr; u8g_pb16v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_GetPageBox
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_Next
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_First
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_SetPixel
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_Set8PixelOpt2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_Clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_Is8PixelVisible
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_2x_fn
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_2x_fn
</UL>

<P><STRONG><a name="[e5]"></a>u8g_dev_pb8v1_base_fn</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, u8g_pb8v1.o(i.u8g_dev_pb8v1_base_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = u8g_dev_pb8v1_base_fn &rArr; u8g_pb8v1_Set8PixelOpt2 &rArr; u8g_pb8v1_SetPixel &rArr; u8g_pb8v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_GetPageBox
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_Clear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_Next
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_First
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb8v1_SetPixel
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb8v1_Set8PixelOpt2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_Is8PixelVisible
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_adafruit_128x64_fn
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_fn
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_fn
</UL>

<P><STRONG><a name="[5]"></a>u8g_dev_sh1106_128x64_2x_fn</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, u8g_dev_ssd1306_128x64.o(i.u8g_dev_sh1106_128x64_2x_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = u8g_dev_sh1106_128x64_2x_fn &rArr; u8g_dev_pb16v1_base_fn &rArr; u8g_pb16v1_Set8PixelOpt2 &rArr; u8g_pb16v1_SetPixel &rArr; u8g_pb16v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteSequence
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetChipSelect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetAddress
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitCom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g_dev_ssd1306_128x64.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>u8g_dev_sh1106_128x64_fn</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, u8g_dev_ssd1306_128x64.o(i.u8g_dev_sh1106_128x64_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = u8g_dev_sh1106_128x64_fn &rArr; u8g_dev_pb8v1_base_fn &rArr; u8g_pb8v1_Set8PixelOpt2 &rArr; u8g_pb8v1_SetPixel &rArr; u8g_pb8v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_WriteBuffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetChipSelect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetAddress
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitCom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g_dev_ssd1306_128x64.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>u8g_dev_ssd1306_128x64_2x_fn</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, u8g_dev_ssd1306_128x64.o(i.u8g_dev_ssd1306_128x64_2x_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = u8g_dev_ssd1306_128x64_2x_fn &rArr; u8g_dev_pb16v1_base_fn &rArr; u8g_pb16v1_Set8PixelOpt2 &rArr; u8g_pb16v1_SetPixel &rArr; u8g_pb16v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteSequence
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetChipSelect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetAddress
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitCom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g_dev_ssd1306_128x64.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>u8g_dev_ssd1306_128x64_fn</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, u8g_dev_ssd1306_128x64.o(i.u8g_dev_ssd1306_128x64_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = u8g_dev_ssd1306_128x64_fn &rArr; u8g_dev_pb8v1_base_fn &rArr; u8g_pb8v1_Set8PixelOpt2 &rArr; u8g_pb8v1_SetPixel &rArr; u8g_pb8v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_WriteBuffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetChipSelect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetAddress
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitCom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g_dev_ssd1306_128x64.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>u8g_dev_ssd1306_adafruit_128x64_fn</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, u8g_dev_ssd1306_128x64.o(i.u8g_dev_ssd1306_adafruit_128x64_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = u8g_dev_ssd1306_adafruit_128x64_fn &rArr; u8g_dev_pb8v1_base_fn &rArr; u8g_pb8v1_Set8PixelOpt2 &rArr; u8g_pb8v1_SetPixel &rArr; u8g_pb8v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_WriteBuffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetChipSelect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetAddress
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitCom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g_dev_ssd1306_128x64.o(.data)
</UL>
<P><STRONG><a name="[be]"></a>u8g_draw_glyph180</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, u8g_font.o(i.u8g_draw_glyph180))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = u8g_draw_glyph180 &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetGlyphDataStart
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr180
</UL>

<P><STRONG><a name="[d1]"></a>u8g_font_GetCapitalAHeight</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetCapitalAHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetCapitalAHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[c5]"></a>u8g_font_GetEncoding65Pos</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetEncoding65Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetEncoding65Pos
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_word
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[c4]"></a>u8g_font_GetEncoding97Pos</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetEncoding97Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetEncoding97Pos
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_word
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[d5]"></a>u8g_font_GetFontAscent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontAscent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontAscent
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[d6]"></a>u8g_font_GetFontDescent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontDescent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[c3]"></a>u8g_font_GetFontEndEncoding</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontEndEncoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontEndEncoding
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[c2]"></a>u8g_font_GetFontStartEncoding</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontStartEncoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontStartEncoding
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[d3]"></a>u8g_font_GetFontXAscent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontXAscent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontXAscent
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[d4]"></a>u8g_font_GetFontXDescent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontXDescent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[d2]"></a>u8g_font_GetLowerGDescent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetLowerGDescent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetLowerGDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[41]"></a>u8g_font_calc_vref_font</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_font_calc_vref_font))
<BR>[Address Reference Count : 1]<UL><LI> u8g_font.o(i.u8g_SetFontPosBaseline)
</UL>
<P><STRONG><a name="[e2]"></a>u8g_page_First</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, u8g_page.o(i.u8g_page_First))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[e3]"></a>u8g_page_Next</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, u8g_page.o(i.u8g_page_Next))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[e1]"></a>u8g_pb16v1_Clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, u8g_pb16v1.o(i.u8g_pb16v1_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
</UL>

<P><STRONG><a name="[df]"></a>u8g_pb16v1_Set8PixelOpt2</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, u8g_pb16v1.o(i.u8g_pb16v1_Set8PixelOpt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = u8g_pb16v1_Set8PixelOpt2 &rArr; u8g_pb16v1_SetPixel &rArr; u8g_pb16v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_SetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
</UL>

<P><STRONG><a name="[e0]"></a>u8g_pb16v1_SetPixel</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, u8g_pb16v1.o(i.u8g_pb16v1_SetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = u8g_pb16v1_SetPixel &rArr; u8g_pb16v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_Set8PixelOpt2
</UL>

<P><STRONG><a name="[f0]"></a>u8g_pb16v1_set_pixel</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, u8g_pb16v1.o(i.u8g_pb16v1_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_pb16v1_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_SetPixel
</UL>

<P><STRONG><a name="[e6]"></a>u8g_pb8v1_Set8PixelOpt2</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, u8g_pb8v1.o(i.u8g_pb8v1_Set8PixelOpt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = u8g_pb8v1_Set8PixelOpt2 &rArr; u8g_pb8v1_SetPixel &rArr; u8g_pb8v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb8v1_SetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[e7]"></a>u8g_pb8v1_SetPixel</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, u8g_pb8v1.o(i.u8g_pb8v1_SetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = u8g_pb8v1_SetPixel &rArr; u8g_pb8v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb8v1_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb8v1_Set8PixelOpt2
</UL>

<P><STRONG><a name="[f1]"></a>u8g_pb8v1_set_pixel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, u8g_pb8v1.o(i.u8g_pb8v1_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_pb8v1_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb8v1_SetPixel
</UL>

<P><STRONG><a name="[e8]"></a>u8g_pb_Clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, u8g_pb.o(i.u8g_pb_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[e4]"></a>u8g_pb_GetPageBox</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, u8g_pb.o(i.u8g_pb_GetPageBox))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[de]"></a>u8g_pb_Is8PixelVisible</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, u8g_pb.o(i.u8g_pb_Is8PixelVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_pb_Is8PixelVisible &rArr; u8g_pb_IsYIntersection
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_IsYIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[f2]"></a>u8g_pb_IsYIntersection</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, u8g_pb.o(i.u8g_pb_IsYIntersection))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = u8g_pb_IsYIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_Is8PixelVisible
</UL>

<P><STRONG><a name="[eb]"></a>u8g_pb_WriteBuffer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, u8g_pb.o(i.u8g_pb_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_pb_WriteBuffer &rArr; u8g_WriteSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_adafruit_128x64_fn
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x64_fn
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_sh1106_128x64_fn
</UL>

<P><STRONG><a name="[42]"></a>u8g_state_dummy_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, u8g_state.o(i.u8g_state_dummy_cb))
<BR>[Address Reference Count : 1]<UL><LI> u8g_ll_api.o(i.u8g_init_data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[84]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[85]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[cc]"></a>u8g_is_intersection_decision_tree</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, u8g_clip.o(i.u8g_is_intersection_decision_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_is_intersection_decision_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
</UL>

<P><STRONG><a name="[b8]"></a>u8g_CopyGlyphDataToCache</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, u8g_font.o(i.u8g_CopyGlyphDataToCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_CopyGlyphDataToCache &rArr; u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[c6]"></a>u8g_FillEmptyGlyphCache</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_FillEmptyGlyphCache))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[c1]"></a>u8g_font_GetFontGlyphStructureSize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontGlyphStructureSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_font_GetFontGlyphStructureSize &rArr; u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetGlyphDataStart
</UL>

<P><STRONG><a name="[b9]"></a>u8g_font_GetFormat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontGlyphStructureSize
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_CopyGlyphDataToCache
</UL>

<P><STRONG><a name="[ec]"></a>u8g_font_GetGlyphDataStart</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, u8g_font.o(i.u8g_font_GetGlyphDataStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = u8g_font_GetGlyphDataStart &rArr; u8g_font_GetFontGlyphStructureSize &rArr; u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontGlyphStructureSize
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph180
</UL>

<P><STRONG><a name="[ed]"></a>u8g_font_get_byte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_font_get_byte))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetLowerGDescent
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXDescent
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXAscent
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontStartEncoding
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontEndEncoding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontDescent
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontAscent
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetCapitalAHeight
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
</UL>

<P><STRONG><a name="[ee]"></a>u8g_font_get_word</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_font_get_word))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding97Pos
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding65Pos
</UL>

<P><STRONG><a name="[ca]"></a>u8g_init_data</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_init_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_init_data
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetColorIndex
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontPosBaseline
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitComFn
</UL>

<P><STRONG><a name="[97]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[95]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[9a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[99]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
